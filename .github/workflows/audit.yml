name: Code Quality Audit

on:
  # Run on pull requests
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - '.pre-commit-config.yaml'

  # Run nightly at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      target:
        description: 'Target directory to audit'
        required: false
        default: '.'
      mode:
        description: 'Audit mode (check/fix)'
        required: false
        default: 'check'

jobs:
  audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git operations

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

      - name: Run code quality audit
        id: audit
        run: |
          TARGET="${{ github.event.inputs.target || '.' }}"
          python -m auditor.audit_manager --target "$TARGET"

      - name: Generate audit report
        run: |
          TARGET="${{ github.event.inputs.target || '.' }}"
          python -m auditor.audit_manager --target "$TARGET"

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-reports-py${{ matrix.python-version }}
          path: |
            reports/
            htmlcov/
          retention-days: 30

      - name: Comment PR with audit summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read the latest audit report
            const reportsDir = 'reports';
            const files = fs.readdirSync(reportsDir).filter(f => f.endsWith('.md'));
            const latestReport = files.sort().pop();

            if (latestReport) {
              const reportPath = path.join(reportsDir, latestReport);
              const reportContent = fs.readFileSync(reportPath, 'utf8');

              // Extract key metrics from markdown
              const lines = reportContent.split('\n');
              let summary = '## üîç Code Quality Audit Results\n\n';

              for (const line of lines) {
                if (line.includes('**Overall Health Score:**') ||
                    line.includes('- **Files Analyzed:**') ||
                    line.includes('- **Security Issues:**') ||
                    line.includes('- **Outdated Packages:**')) {
                  summary += line + '\n';
                }
              }

              summary += '\n[üìä View full report](' + latestReport + ')';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Fail on critical issues
        if: steps.audit.outcome == 'failure'
        run: |
          echo "‚ùå Code quality audit failed. Please fix the issues above."
          exit 1
